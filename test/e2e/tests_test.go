// Code generated by e2e/generator, DO NOT EDIT.
//go:build e2e

package e2e

import (
	"testing"
)

func TestStub(t *testing.T) {
	t.Skip("stub is skipped")
}
func TestAwsAmznInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestGceDefaultUpgradeContainerdFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerCentosStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereCentosStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsAmznUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsCentosUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsDefaultUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRhelUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureCentosUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureDefaultUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRhelUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestGceDefaultUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerCentosUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereCentosUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarUpgradeContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsAmznCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsCentosCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsRhelCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureCentosCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRhelCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestGceDefaultCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerCentosCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCalicoContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsAmznCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsCentosCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRhelCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureCentosCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRhelCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestGceDefaultCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerCentosCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCalicoContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsAmznCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsCentosCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRhelCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureCentosCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRhelCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestGceDefaultCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerCentosCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCalicoContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["calico_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsAmznCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsCentosCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureCentosCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerCentosCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsAmznCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsCentosCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureCentosCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerCentosCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsAmznCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsCentosCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureCentosCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerCentosCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsAmznUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsCentosUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsDefaultUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRhelUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureCentosUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureDefaultUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRhelUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestGceDefaultUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerCentosUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereCentosUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarUpgradeCiliumContainerdExternalFromV1_27_11_ToV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11", "v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsAmznUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsCentosUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsDefaultUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRhelUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureCentosUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureDefaultUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRhelUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestGceDefaultUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerCentosUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereCentosUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarUpgradeCiliumContainerdExternalFromV1_28_7_ToV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7", "v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsDefaultKubeProxyIpvsExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["kube_proxy_ipvs_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdExternalV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdExternalV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdExternalV1_29_2(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.29.2")
	scenario.Run(ctx, t)
}

func TestAzureCentosCsiCcmMigrationV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCsiCcmMigrationV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCsiCcmMigrationV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRhelCsiCcmMigrationV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCsiCcmMigrationV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestGceDefaultCsiCcmMigrationV1_27_11(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.27.11")
	scenario.Run(ctx, t)
}

func TestAzureCentosCsiCcmMigrationV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCsiCcmMigrationV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCsiCcmMigrationV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRhelCsiCcmMigrationV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCsiCcmMigrationV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}

func TestGceDefaultCsiCcmMigrationV1_28_7(t *testing.T) {
	ctx := NewSignalContext(t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.28.7")
	scenario.Run(ctx, t)
}
