// Code generated by e2e/generator, DO NOT EDIT.
//go:build e2e

package e2e

import (
	"testing"
)

func TestStub(t *testing.T) {
	t.Skip("stub is skipped")
}
func TestAwsDefaultInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsUbuntuPreviousLtsInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_ubuntu_previous_lts"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsUbuntuPreviousLtsInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_ubuntu_previous_lts"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsUbuntuPreviousLtsInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_ubuntu_previous_lts"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsUbuntuPreviousLtsUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_ubuntu_previous_lts"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsUbuntuPreviousLtsUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_ubuntu_previous_lts"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarExternalCniFlannelHelmChartV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarExternalCniFlannelHelmChartV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarExternalCniFlannelHelmChartV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["external_cni_flannel_helm_chart"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeCiliumContainerdExternalFromV1_32_ToV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32", "v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["openstack_rockylinux_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeCiliumContainerdExternalFromV1_33_ToV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_cilium_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33", "v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_32(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.32")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_33(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.33")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}

func TestAwsDefaultKubeProxyIpvsExternalV1_34(t *testing.T) {
	ctx := NewSignalContext(t.Context(), t.Logf)
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["kube_proxy_ipvs_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.34")
	if err := scenario.FetchVersions(); err != nil {
		t.Fatal(err)
	}
	scenario.Run(ctx, t)
}
