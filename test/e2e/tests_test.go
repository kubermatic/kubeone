// Code generated by e2e/generator, DO NOT EDIT.
//go:build e2e

package e2e

import (
	"testing"
)

func TestStub(t *testing.T) {
	t.Skip("stub is skipped")
}
func TestAwsAmznInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeDockerFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeDockerFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCalicoContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCalicoDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarWeaveContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarWeaveDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsDefaultKubeProxyIpvsV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["kube_proxy_ipvs"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultKubeProxyIpvsV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["kube_proxy_ipvs"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCloudInitLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_cloud_init"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerDockerV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerDockerV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultKubeProxyIpvsV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["kube_proxy_ipvs"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCsiCcmMigrationV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCsiCcmMigrationV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureCentosCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRhelCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCsiCcmMigrationV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerCentosStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerCentosStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestHetznerCentosStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdExternalFromV1_23_15_ToV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15", "v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerCentosStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeDockerExternalFromV1_21_14_ToV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerCentosStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeDockerExternalFromV1_22_17_ToV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17", "v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCloudInitLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_cloud_init"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCloudInitLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_cloud_init"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdExternalV1_24_9(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.9")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerDockerExternalV1_22_17(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.17")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerDockerExternalV1_23_15(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.15")
	scenario.Run(ctx, t)
}
