// Code generated by e2e/generator, DO NOT EDIT.
//go:build e2e

package e2e

import (
	"testing"
)

func TestStub(t *testing.T) {
	t.Skip("stub is skipped")
}
func TestAwsAmznInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestGceDefaultInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestGceDefaultStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereCentosStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsAmznCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsCentosCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRhelCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestGceDefaultCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCalicoContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestGceDefaultCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCalicoDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsAmznWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsCentosWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRhelWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestGceDefaultWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarWeaveContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestGceDefaultWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarWeaveDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsAmznCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsCentosCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestGceDefaultCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCiliumDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultKubeProxyIpvsV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["kube_proxy_ipvs"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestGceDefaultLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerDockerV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCsiCcmMigrationV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureCentosCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRhelCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCsiCcmMigrationV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsDefaultCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarCsiCcmMigrationV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["csi_ccm_migration"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerCentosInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarInstallDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestHetznerCentosStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereCentosStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdExternalFromV1_23_14_ToV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14", "v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsAmznStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsCentosStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRhelStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestHetznerCentosStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarStableUpgradeContainerdExternalFromV1_24_8_ToV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar_stable"]
	scenario := Scenarios["upgrade_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8", "v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarCloudInitLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar_cloud_init"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdExternalV1_24_8(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.8")
	scenario.Run(ctx, t)
}

func TestAwsAmznLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsCentosLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsDefaultLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsFlatcarLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRhelLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAwsRockylinuxLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureDefaultLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureCentosLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureFlatcarLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRhelLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestAzureRockylinuxLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["azure_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackDefaultLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackCentosLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRockylinuxLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackRhelLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_rhel"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestOpenstackFlatcarLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["openstack_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereDefaultLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereCentosLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_centos"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestVsphereFlatcarLegacyMachineControllerContainerdExternalV1_25_4(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["legacy_machine_controller_containerd_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.25.4")
	scenario.Run(ctx, t)
}

func TestDigitaloceanDefaultLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanCentosLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_centos"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestDigitaloceanRockylinuxLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["digitalocean_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalDefaultLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalCentosLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_centos"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalRockylinuxLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestEquinixmetalFlatcarLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["equinixmetal_flatcar"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerDefaultLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerCentosLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_centos"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}

func TestHetznerRockylinuxLegacyMachineControllerDockerExternalV1_23_14(t *testing.T) {
	ctx := NewSignalContext()
	infra := Infrastructures["hetzner_rockylinux"]
	scenario := Scenarios["legacy_machine_controller_docker_external"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.14")
	scenario.Run(ctx, t)
}
