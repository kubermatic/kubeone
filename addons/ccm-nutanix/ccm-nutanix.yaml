apiVersion: v1
kind: Secret
metadata:
  name: nutanix-creds
  namespace: kube-system
stringData:
  credentials: |
    [
      {
        "type": "basic_auth", 
        "data": { 
          "prismCentral":{
            "username": "{{ .Credentials.NUTANIX_USERNAME }}", 
            "password": "{{ .Credentials.NUTANIX_PASSWORD }}"
          },
          "prismElements": null
        }
      }
    ]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
# Source: nutanix-cloud-provider/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  name: system:cloud-controller-manager
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - patch
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - list
      - watch
      - update
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:cloud-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:cloud-controller-manager
subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system
---
# Source: nutanix-cloud-provider/templates/cm.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: nutanix-config
  namespace: kube-system
data:
  nutanix_config.json: |-
    {
      "prismCentral": {
        "address": "{{ .Credentials.NUTANIX_ENDPOINT }}",
        "port": {{ .Credentials.NUTANIX_PORT }},
        "insecure": {{ .Credentials.NUTANIX_INSECURE }},
        "credentialRef": {
          "kind": "secret",
          "name": "nutanix-creds"
        }
      },
      "enableCustomLabeling": true,
      "topologyDiscovery": {
            "type": "Prism"
          }
    }
---
# Source: nutanix-cloud-provider/templates/cloud-provider-nutanix-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: nutanix-cloud-controller-manager
  name: nutanix-cloud-controller-manager
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: nutanix-cloud-controller-manager
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        k8s-app: nutanix-cloud-controller-manager
    spec:
      hostNetwork: true
      priorityClassName: system-cluster-critical
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      serviceAccountName: cloud-controller-manager
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  k8s-app: nutanix-cloud-controller-manager
      dnsPolicy: Default
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 120
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 120
        - effect: NoSchedule
          key: node.cloudprovider.kubernetes.io/uninitialized
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/not-ready
          operator: Exists
      containers:
        - image: {{ .InternalImages.Get "NutanixCCM" }}
          imagePullPolicy: Always
          name: nutanix-cloud-controller-manager
          args:
            - "--leader-elect=true"
            - "--cloud-config=/etc/cloud/nutanix_config.json"
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
          volumeMounts:
            - mountPath: /etc/cloud
              name: nutanix-config-volume
              readOnly: true
      volumes:
        - name: nutanix-config-volume
          configMap:
            name: nutanix-config
