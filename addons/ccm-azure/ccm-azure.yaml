---
# Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
# Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: cloud-node-manager
    kubernetes.io/cluster-service: "true"
  name: cloud-node-manager
  namespace: kube-system
---
# Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:cloud-controller-manager
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    k8s-app: cloud-controller-manager
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - patch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - services/status
    verbs:
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - create
      - get
      - list
      - watch
      - update
  - apiGroups:
      - ""
    resources:
      - persistentvolumes
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - list
      - watch
      - update
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - create
      - update
---
# Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cloud-node-manager
  labels:
    k8s-app: cloud-node-manager
    kubernetes.io/cluster-service: "true"
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["watch", "list", "get", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes/status"]
    verbs: ["patch"]
---
# Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:cloud-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:cloud-controller-manager
subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system
  - kind: User
    name: cloud-controller-manager
---
# Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloud-node-manager
  labels:
    k8s-app: cloud-node-manager
    kubernetes.io/cluster-service: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cloud-node-manager
subjects:
  - kind: ServiceAccount
    name: cloud-node-manager
    namespace: kube-system
---
# Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: system:cloud-controller-manager:extension-apiserver-authentication-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system
  - apiGroup: ""
    kind: User
    name: cloud-controller-manager
---
# Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cloud-node-manager
  namespace: kube-system
  labels:
    component: cloud-node-manager
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    matchLabels:
      k8s-app: cloud-node-manager
  template:
    metadata:
      labels:
        k8s-app: cloud-node-manager
      annotations:
        cluster-autoscaler.kubernetes.io/daemonset-pod: "true"
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: cloud-node-manager
      hostNetwork: true # required to fetch correct hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          effect: NoSchedule
        - operator: "Exists"
          effect: NoExecute
        - operator: "Exists"
          effect: NoSchedule
      containers:
        - name: cloud-node-manager
          image: "{{ .InternalImages.Get "AzureCNM" }}"
          imagePullPolicy: IfNotPresent
          command: ["cloud-node-manager"]
          args:
            - --node-name=$(NODE_NAME)
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: 2
              memory: 512Mi
---
# Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-controller-manager
  namespace: kube-system
  labels:
    component: cloud-controller-manager
spec:
  selector:
    matchLabels:
      tier: control-plane
      component: cloud-controller-manager
  replicas: 1
  template:
    metadata:
      labels:
        component: cloud-controller-manager
        tier: control-plane
    spec:
      priorityClassName: system-node-critical
      hostNetwork: true
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      serviceAccountName: cloud-controller-manager
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        - effect: NoExecute
          key: node-role.kubernetes.io/etcd
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            tier: control-plane
            component: cloud-controller-manager
      containers:
        - name: cloud-controller-manager
          image: "{{ .InternalImages.Get "AzureCCM" }}"
          imagePullPolicy: IfNotPresent
          command: ["cloud-controller-manager"]
          args:
            - "--allocate-node-cidrs=false" # "false" as we use IPAM in kube-controller-manager
            - "--cloud-config=/etc/cloud/cloud-config"
            - "--cloud-provider=azure"
            - "--cluster-name={{ .Config.Name }}"
            - "--configure-cloud-routes=false" # "false" because we use VXLAN overlay
            - "--controllers=*,-cloud-node"
            - "--leader-elect=true"
            - "--route-reconciliation-period=10s"
            - "--secure-port=10268"
            - "--v=2"
            {{- with .Params.CCM_CONCURRENT_SERVICE_SYNCS }}
            - --concurrent-service-syncs={{ . }}
            {{- end }}
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 4
              memory: 2Gi
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10268
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - name: etc-kubernetes
              mountPath: /etc/kubernetes
            - name: ssl-mount
              mountPath: /etc/ssl
              readOnly: true
            - name: etc-pki
              mountPath: /etc/pki
              readOnly: true
            - name: usr-share-ca-certs
              mountPath: /usr/share/ca-certificates
              readOnly: true
            - name: msi
              mountPath: /var/lib/waagent/ManagedIdentity-Settings
              readOnly: true
            - mountPath: /etc/cloud
              name: cloud-config-volume
              readOnly: true
      volumes:
        - name: etc-kubernetes
          hostPath:
            path: /etc/kubernetes
        - name: ssl-mount
          hostPath:
            path: /etc/ssl
        - name: etc-pki
          hostPath:
            path: /etc/pki
        - name: usr-share-ca-certs
          hostPath:
            path: /usr/share/ca-certificates
        - name: msi
          hostPath:
            path: /var/lib/waagent/ManagedIdentity-Settings
        - name: cloud-config-volume
          secret:
            secretName: cloud-config
