---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: machines.cluster.k8s.io
  annotations:
    "api-approved.kubernetes.io": "unapproved, legacy API"
spec:
  group: cluster.k8s.io
  scope: Namespaced
  names:
    kind: Machine
    plural: machines
    singular: machine
    listKind: MachineList
    shortNames: ["ma"]
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          x-kubernetes-preserve-unknown-fields: true
          type: object
      additionalPrinterColumns:
        - name: Provider
          type: string
          jsonPath: .spec.providerSpec.value.cloudProvider
        - name: OS
          type: string
          jsonPath: .spec.providerSpec.value.operatingSystem
        - name: Node
          type: string
          jsonPath: .status.nodeRef.name
        - name: Kubelet
          type: string
          jsonPath: .spec.versions.kubelet
        - name: Address
          type: string
          jsonPath: .status.addresses[0].address
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
        - name: Deleted
          type: date
          jsonPath: .metadata.deletionTimestamp
          priority: 1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: machinesets.cluster.k8s.io
  annotations:
    "api-approved.kubernetes.io": "unapproved, legacy API"
spec:
  group: cluster.k8s.io
  scope: Namespaced
  names:
    kind: MachineSet
    plural: machinesets
    singular: machineset
    listKind: MachineSetList
    shortNames: ["ms"]
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          x-kubernetes-preserve-unknown-fields: true
          type: object
      subresources:
        status: {}
      additionalPrinterColumns:
        - name: Replicas
          type: integer
          jsonPath: .spec.replicas
        - name: Available-Replicas
          type: integer
          jsonPath: .status.availableReplicas
        - name: Provider
          type: string
          jsonPath: .spec.template.spec.providerSpec.value.cloudProvider
        - name: OS
          type: string
          jsonPath: .spec.template.spec.providerSpec.value.operatingSystem
        - name: MachineDeployment
          type: string
          jsonPath: .metadata.ownerReferences[0].name
        - name: Kubelet
          type: string
          jsonPath: .spec.template.spec.versions.kubelet
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
        - name: Deleted
          type: date
          jsonPath: .metadata.deletionTimestamp
          priority: 1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: machinedeployments.cluster.k8s.io
  annotations:
    "api-approved.kubernetes.io": "unapproved, legacy API"
spec:
  group: cluster.k8s.io
  scope: Namespaced
  names:
    kind: MachineDeployment
    plural: machinedeployments
    singular: machinedeployment
    listKind: MachineDeploymentList
    shortNames: ["md"]
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          x-kubernetes-preserve-unknown-fields: true
          type: object
      subresources:
        scale:
          specReplicasPath: .spec.replicas
          statusReplicasPath: .status.replicas
        status: {}
      additionalPrinterColumns:
        - name: Replicas
          type: integer
          jsonPath: .spec.replicas
        - name: Available-Replicas
          type: integer
          jsonPath: .status.availableReplicas
        - name: Provider
          type: string
          jsonPath: .spec.template.spec.providerSpec.value.cloudProvider
        - name: OS
          type: string
          jsonPath: .spec.template.spec.providerSpec.value.operatingSystem
        - name: Kubelet
          type: string
          jsonPath: .spec.template.spec.versions.kubelet
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
        - name: Deleted
          type: date
          jsonPath: .metadata.deletionTimestamp
          priority: 1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: clusters.cluster.k8s.io
  annotations:
    "api-approved.kubernetes.io": "unapproved, legacy API"
spec:
  group: cluster.k8s.io
  scope: Namespaced
  names:
    kind: Cluster
    plural: clusters
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          x-kubernetes-preserve-unknown-fields: true
          type: object
      subresources:
        # status enables the status subresource.
        status: {}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: machine-controller:kubelet-bootstrap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:node-bootstrapper
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:bootstrappers:machine-controller:default-node-token

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: machine-controller:node-signer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:certificates.k8s.io:certificatesigningrequests:nodeclient
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:bootstrappers:machine-controller:default-node-token

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: machine-controller
  namespace: kube-system
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
      - configmaps
    verbs:
      - create
      - list
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
    resourceNames:
      - machine-controller
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - leases
    verbs:
      - "*"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: machine-controller
  namespace: kube-public
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: machine-controller
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - list
      - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: machine-controller
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: machine-controller
subjects:
  - kind: ServiceAccount
    name: machine-controller
    namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: machine-controller
  namespace: kube-public
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: machine-controller
subjects:
  - kind: ServiceAccount
    name: machine-controller
    namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: machine-controller
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: machine-controller
subjects:
  - kind: ServiceAccount
    name: machine-controller
    namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: machine-controller
rules:
  - apiGroups:
      - ""
    resources:
      - "events"
    verbs:
      - "create"
      - "patch"
  - apiGroups:
      - "apiextensions.k8s.io"
    resources:
      - "customresourcedefinitions"
    verbs:
      - "create"
      - "get"
      - "list"
      - "watch"
  - apiGroups:
      - "apiextensions.k8s.io"
    resources:
      - "customresourcedefinitions"
    resourceNames:
      - "machines.machine.k8s.io"
    verbs:
      - "*"
  - apiGroups:
      - "machine.k8s.io"
    resources:
      - "machines"
    verbs:
      - "*"
  - apiGroups:
      - "cluster.k8s.io"
    resources:
      - "clusters"
      - "clusters/status"
      - "machinedeployments"
      - "machinedeployments/status"
      - "machines"
      - "machinesets"
      - "machinesets/status"
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - "nodes"
    verbs:
      - "*"
  # Pods are required for draining
  # PVs are required for vsphere to detach them prior to deleting the instance
  # Secrets and configmaps are needed for the bootstrap token creation and when a ref is used for a
  # value in the machineSpec
  - apiGroups:
      - ""
    resources:
      - "pods"
    verbs:
      - "list"
      - "get"
  - apiGroups:
      - ""
    resources:
      - "persistentvolumes"
      - "secrets"
      - "configmaps"
    verbs:
      - "list"
      - "get"
      - "watch"
  - apiGroups:
      - ""
    resources:
      - "pods/eviction"
    verbs:
      - "create"
  # The following roles are required for NodeCSRApprover controller to be able
  # to reconcile CertificateSigningRequests for kubelet serving certificates.
  - apiGroups:
      - "certificates.k8s.io"
    resources:
      - "certificatesigningrequests"
    verbs:
      - "get"
      - "list"
      - "watch"
  - apiGroups:
      - "certificates.k8s.io"
    resources:
      - "certificatesigningrequests/approval"
    verbs:
      - "update"
  - apiGroups:
      - "certificates.k8s.io"
    resources:
      - "signers"
    resourceNames:
      - "kubernetes.io/kubelet-serving"
    verbs:
      - "approve"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: machine-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: machine-controller
subjects:
  - kind: ServiceAccount
    name: machine-controller
    namespace: kube-system

---
apiVersion: v1
kind: Service
metadata:
  name: machine-controller-webhook
  namespace: kube-system
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 9876
  selector:
    app: machine-controller-webhook
  type: ClusterIP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: machine-controller
  namespace: kube-system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: machine-controller
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: machine-controller
  template:
    metadata:
      annotations:
        "prometheus.io/scrape": "true"
        "prometheus.io/port": "8080"
        "prometheus.io/path": "/metrics"
        "caBundle-hash": "{{ .Config.CABundle | sha256sum }}"
      labels:
        app: machine-controller
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: Exists
          effect: NoSchedule
        - key: "node.cloudprovider.kubernetes.io/uninitialized"
          value: "true"
          effect: NoSchedule
        - key: "CriticalAddonsOnly"
          operator: Exists
      serviceAccountName: machine-controller
      containers:
        - name: machine-controller
          image: "{{ .InternalImages.Get "MachineController" }}"
          imagePullPolicy: IfNotPresent
          command:
            - /usr/local/bin/machine-controller
          args:
            - -logtostderr
            - -v=4
            - -health-probe-address=0.0.0.0:8085
            - -metrics-address=0.0.0.0:8080
            - -cluster-dns={{ .Resources.NodeLocalDNSVirtualIP }}
            - -node-csr-approver
            - -join-cluster-timeout=15m
            - -node-container-runtime={{ .Config.ContainerRuntime }}
            {{ with .Config.Proxy.HTTP }}
            - -node-http-proxy={{ . }}
            {{ end }}
            {{ with .Config.Proxy.NoProxy }}
            - -node-no-proxy={{ . }}
            {{ end }}
            {{ with .Config.RegistryConfiguration.InsecureRegistryAddress }}
            - -node-insecure-registries={{ . }}
            {{ end }}
            {{ if .Config.CABundle }}
            - -ca-bundle={{ .Resources.CABundleSSLCertFilePath }}
            {{ end }}
            - -node-kubelet-repository={{ .Resources.KubeletImageRepository }}
            - -node-pause-image={{ .InternalImages.Get "PauseImage" }}
          env:
            - name: HTTPS_PROXY
              value: "{{ .Config.Proxy.HTTPS }}"
            - name: NO_PROXY
              value: "{{ .Config.Proxy.NoProxy }}"
{{ .MachineControllerCredentialsEnvVars | indent 12 }}
{{ if .Config.CABundle }}
{{ caBundleEnvVar | indent 12 }}
{{ end }}
          ports:
            - containerPort: 8085
          livenessProbe:
            httpGet:
              path: /readyz
              port: 8085
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8085
            periodSeconds: 5
{{ if .Config.CABundle }}
          volumeMounts:
{{ caBundleVolumeMount | indent 12 }}
      volumes:
{{ caBundleVolume | indent 8 }}
{{ end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: machine-controller-webhook
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: machine-controller-webhook
  template:
    metadata:
      labels:
        app: machine-controller-webhook
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: Exists
          effect: NoSchedule
        - key: "node.cloudprovider.kubernetes.io/uninitialized"
          value: "true"
          effect: NoSchedule
        - key: "CriticalAddonsOnly"
          operator: Exists
      serviceAccountName: machine-controller
      containers:
        - image: "{{ .InternalImages.Get "MachineController" }}"
          imagePullPolicy: IfNotPresent
          name: machine-controller-webhook
          command:
            - /usr/local/bin/webhook
          args:
            - -logtostderr
            - -v=4
            - -listen-address=0.0.0.0:9876
            {{ if .Config.CloudProvider.External }}
            - -node-external-cloud-provider
            {{ end }}
            {{ if .CSIMigrationFeatureGates }}
            - -node-kubelet-feature-gates={{ .CSIMigrationFeatureGates }}
            {{ end }}
          env:
            - name: HTTPS_PROXY
              value: "{{ .Config.Proxy.HTTPS }}"
            - name: NO_PROXY
              value: "{{ .Config.Proxy.NoProxy }}"
{{ .MachineControllerCredentialsEnvVars | indent 12 }}
{{ if .Config.CABundle }}
{{ caBundleEnvVar | indent 12 }}
{{ end }}
          volumeMounts:
            - name: machinecontroller-webhook-serving-cert
              mountPath: /tmp/cert
              readOnly: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9876
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 9876
              scheme: HTTPS
            periodSeconds: 5
      volumes:
        - name: machinecontroller-webhook-serving-cert
          secret:
            secretName: machinecontroller-webhook-serving-cert
            defaultMode: 0444

---
apiVersion: v1
kind: Secret
metadata:
  name: machinecontroller-webhook-serving-cert
  namespace: kube-system
data:
  "cert.pem": |
{{ .Certificates.MachineControllerWebhookCert | b64enc | indent 4 }}
  "key.pem": |
{{ .Certificates.MachineControllerWebhookKey | b64enc | indent 4 }}
  "ca.crt": |
{{ .Certificates.KubernetesCA | b64enc | indent 4 }}

---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: machinedeployments.machine-controller.kubermatic.io
webhooks:
  - name: machinedeployments.machine-controller.kubermatic.io
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions: ["v1"]
    rules:
      - apiGroups:
          - "cluster.k8s.io"
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - machinedeployments
    clientConfig:
      service:
        namespace: kube-system
        name: machine-controller-webhook
        path: /machinedeployments
      caBundle: |
{{ .Certificates.KubernetesCA | b64enc | indent 8 }}
  - name: machines.machine-controller.kubermatic.io
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions: ["v1"]
    rules:
      - apiGroups:
          - "cluster.k8s.io"
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - machines
    clientConfig:
      service:
        namespace: kube-system
        name: machine-controller-webhook
        path: /machines
      caBundle: |
{{ .Certificates.KubernetesCA | b64enc | indent 8 }}
