apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kccm
  namespace: kube-system
rules:
  - apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - kubevirt.io
    resources:
      - virtualmachineinstances
    verbs:
      - get
      - watch
      - list
      - update
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kccm
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - '*'
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kccm
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kccm-sa
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kccm
subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kccm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kccm
subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: kubevirt-cloud-controller-manager
  name: kubevirt-cloud-controller-manager
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kubevirt-cloud-controller-manager
  template:
    metadata:
      annotations:
        kubeone.k8c.io/credentials-hash: '{{ .CredentialsCCMHash }}'
      labels:
        k8s-app: kubevirt-cloud-controller-manager
    spec:
      containers:
        - args:
            - --cloud-config=/etc/cloud/cloud-config
            - --cloud-provider=kubevirt
            - --cluster-name='{{ .Config.Name }}'
          command:
            - /bin/kubevirt-cloud-controller-manager
          image: '{{ .InternalImages.Get "KubeVirtCCM" }}'
          imagePullPolicy: Always
          name: kubevirt-cloud-controller-manager
          resources:
            requests:
              cpu: 100m
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /var/run/secrets/infracluster
              name: infracluster
              readOnly: true
            - mountPath: /etc/cloud
              name: cloud-config
              readOnly: true
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      serviceAccountName: cloud-controller-manager
      tolerations:
        - effect: NoSchedule
          key: node.cloudprovider.kubernetes.io/uninitialized
          value: "true"
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      volumes:
        - name: infracluster
          secret:
            secretName: kubeone-ccm-credentials
        - configMap:
            name: cloud-config
          name: cloud-config
