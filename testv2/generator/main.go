package main

import (
	"bytes"
	"flag"
	"io"
	"log"
	"os"
	"text/template"

	"k8c.io/kubeone/testv2/e2e"

	"sigs.k8s.io/yaml"
)

type KubeoneTest struct {
	Infrastructure     string     `json:"infrastructure"`
	KubernetesVersions []string   `json:"kubernetesVersions"`
	Scenarios          []Scenario `json:"scenarios"`
}

type Infra struct{}

type Scenario struct {
	Name   string              `json:"name"`
	Params []map[string]string `json:"params"`
}

var (
	filePathFlag    string
	packageNameFlag string
	outputFileFlag  string
	outputType      string
)

const fileHeader = `// Code generated by e2e/generator, DO NOT EDIT.

package {{.PackageName}}

import (
	"testing"
)

func TestStub(t *testing.T) {
	t.Skip("stub is skipped")
}`

func main() {
	flag.StringVar(&filePathFlag, "file", "", "path to the YAML file with tests definitions to generate")
	flag.StringVar(&packageNameFlag, "package", "e2e", "the name of the generated Go package")
	flag.StringVar(&outputType, "output-type", "", "the type of the generator output (yaml|go)")
	flag.StringVar(&outputFileFlag, "output", "-", "the name of the file to write to, - for stdout")
	flag.Parse()

	if filePathFlag == "" {
		log.Fatal("-file argument in required")
	}

	if outputType == "" {
		log.Fatal("-output-type argument is required")
	}

	var outputBuf io.ReadWriter = &bytes.Buffer{}

	if outputFileFlag == "-" {
		outputBuf = os.Stdout
	}

	buf, err := os.ReadFile(filePathFlag)
	if err != nil {
		log.Fatal(err)
	}

	var getTests []KubeoneTest

	if err = yaml.UnmarshalStrict(buf, &getTests); err != nil {
		log.Fatal(err)
	}

	err = template.Must(template.New("").Parse(fileHeader)).Execute(outputBuf, struct {
		PackageName string
	}{
		PackageName: packageNameFlag,
	})
	if err != nil {
		log.Fatal(err)
	}

	for _, genTest := range getTests {
		infra, ok := e2e.Infrastructures[genTest.Infrastructure]
		if !ok {
			log.Fatalf("%q infra is not defined", genTest.Infrastructure)
		}

		for _, genScenario := range genTest.Scenarios {
			scenario, ok := e2e.Scenarios[genScenario.Name]
			if !ok {
				log.Fatalf("%q scenario is not defined", genScenario.Name)
			}

			scenario.SetInfra(infra)
			scenario.SetVersions(genTest.KubernetesVersions...)
			scenario.SetParams(genScenario.Params)

			if err = scenario.GenerateTests(outputBuf); err != nil {
				log.Fatal(err)
			}
		}
	}

	if outputFileFlag != "-" {
		data, _ := io.ReadAll(outputBuf)
		os.WriteFile(outputFileFlag, data, 0644)
	}
}
