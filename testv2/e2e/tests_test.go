// Code generated by e2e/generator, DO NOT EDIT.
//go:build e2e

package e2e

import (
	"testing"
)

func TestStub(t *testing.T) {
	t.Skip("stub is skipped")
}
func TestAwsAmznInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsCentosInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsDefaultsInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsFlatcarInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsRhelInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsRockylinuxInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAzureDefaultInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestDigitaloceanDefaultInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestEquinixmetalDefaultInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestGceDefaultInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestHetznerDefaultInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestOpenstackDefaultInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestVsphereDefaultInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestVsphereFlatcarInstallContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsAmznInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarInstallContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsAmznInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAwsCentosInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAwsDefaultsInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAwsFlatcarInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAwsRhelInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAwsRockylinuxInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAzureDefaultInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestDigitaloceanDefaultInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestEquinixmetalDefaultInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestGceDefaultInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestHetznerDefaultInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestOpenstackDefaultInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestVsphereDefaultInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestVsphereFlatcarInstallContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAwsAmznInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestAwsCentosInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestAwsDefaultsInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestAwsFlatcarInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestAwsRhelInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestAwsRockylinuxInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestAzureDefaultInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestDigitaloceanDefaultInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestEquinixmetalDefaultInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestGceDefaultInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestHetznerDefaultInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestOpenstackDefaultInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestVsphereDefaultInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestVsphereFlatcarInstallContainerdV1_24_2(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.2")
	scenario.Run(t)
}

func TestAwsAmznInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsCentosInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsDefaultsInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsFlatcarInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsRhelInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsRockylinuxInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAzureDefaultInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestDigitaloceanDefaultInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestEquinixmetalDefaultInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestGceDefaultInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestHetznerDefaultInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestOpenstackDefaultInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestVsphereDefaultInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestVsphereFlatcarInstallDockerV1_21_14(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsAmznInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarInstallDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["install_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsAmznUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarUpgradeContainerdFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsAmznUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestAwsCentosUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestAwsDefaultsUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestAwsFlatcarUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestAwsRhelUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestAwsRockylinuxUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestAzureDefaultUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestDigitaloceanDefaultUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestEquinixmetalDefaultUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestGceDefaultUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestHetznerDefaultUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestOpenstackDefaultUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestVsphereDefaultUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestVsphereFlatcarUpgradeContainerdFromV1_22_11_ToV1_23_8(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["upgrade_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11", "v1.23.8")
	scenario.Run(t)
}

func TestAwsAmznUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarUpgradeDockerFromV1_21_14_ToV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["upgrade_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14", "v1.22.11")
	scenario.Run(t)
}

func TestAwsAmznCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarCalicoContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["calico_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsAmznCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarCalicoDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["calico_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsAmznWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarWeaveContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["weave_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsAmznWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarWeaveDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["weave_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsAmznCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarCiliumContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsAmznCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_amzn"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsCentosCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_centos"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsFlatcarCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRhelCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rhel"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsRockylinuxCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_rockylinux"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAzureDefaultCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["azure_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestDigitaloceanDefaultCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["digitalocean_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestEquinixmetalDefaultCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["equinixmetal_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestGceDefaultCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["gce_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestHetznerDefaultCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["hetzner_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestOpenstackDefaultCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["openstack_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereDefaultCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_default"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestVsphereFlatcarCiliumDockerV1_22_11(t *testing.T) {
	infra := Infrastructures["vsphere_flatcar"]
	scenario := Scenarios["cilium_docker"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_21_14(t *testing.T) {
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.21.14")
	scenario.Run(t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAwsLongTimeoutDefaultConformanceContainerdV1_24_1(t *testing.T) {
	infra := Infrastructures["aws_long_timeout_default"]
	scenario := Scenarios["conformance_containerd"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.1")
	scenario.Run(t)
}

func TestAwsDefaultsInstallOperatingSystemManagerV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["install_operating_system_manager"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsInstallOperatingSystemManagerV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["install_operating_system_manager"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAwsDefaultsInstallOperatingSystemManagerV1_24_1(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["install_operating_system_manager"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.1")
	scenario.Run(t)
}

func TestAwsDefaultsKubeProxyIpvsV1_22_11(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["kube_proxy_ipvs"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.22.11")
	scenario.Run(t)
}

func TestAwsDefaultsKubeProxyIpvsV1_23_8(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["kube_proxy_ipvs"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.23.8")
	scenario.Run(t)
}

func TestAwsDefaultsKubeProxyIpvsV1_24_1(t *testing.T) {
	infra := Infrastructures["aws_defaults"]
	scenario := Scenarios["kube_proxy_ipvs"]
	scenario.SetInfra(infra)
	scenario.SetVersions("v1.24.1")
	scenario.Run(t)
}
